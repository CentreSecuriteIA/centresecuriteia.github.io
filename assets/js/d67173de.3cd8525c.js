"use strict";(self.webpackChunkatlas=self.webpackChunkatlas||[]).push([[8278],{2523:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"chapters/05/8","title":"Evaluation Design","description":"Now that we\'ve explored various evaluation techniques and methodologies, and also some concrete evaluations in different categories of capability, propensity and control. The next thing to understand is how to implement these effectively at scale. The objective of this section is to outline some best practices for building a robust evaluation infrastructure - from designing evaluation protocols and quality assurance processes, to scaling automation and integrating with the broader AI Safety ecosystem. We\'ll see how components like evaluation design, model-written evaluations, and meta-evaluation methods work together to make AIs safer.","source":"@site/docs/chapters/05/08.md","sourceDirName":"chapters/05","slug":"/chapters/05/08","permalink":"/aisafety_atlas_multilingual_website/chapters/05/08","draft":false,"unlisted":false,"editUrl":"https://github.com/markov-root/atlas/edit/main/docs/chapters/05/08.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"8","title":"Evaluation Design","sidebar_label":"5.8 Evaluation Design","sidebar_position":9,"slug":"/chapters/05/08","reading_time_core":"9 min","reading_time_optional":"4 min","pagination_prev":"chapters/05/7","pagination_next":"chapters/05/9"},"sidebar":"docs","previous":{"title":"5.7 Control Evaluations","permalink":"/aisafety_atlas_multilingual_website/chapters/05/07"},"next":{"title":"5.9 Limitations","permalink":"/aisafety_atlas_multilingual_website/chapters/05/09"}}');var n=a(4848),s=a(8453),o=(a(2482),a(8559)),r=(a(1966),a(2501));const l={id:8,title:"Evaluation Design",sidebar_label:"5.8 Evaluation Design",sidebar_position:9,slug:"/chapters/05/08",reading_time_core:"9 min",reading_time_optional:"4 min",pagination_prev:"chapters/05/7",pagination_next:"chapters/05/9"},c="Evaluation Design",d={},h=[{value:"Affordances",id:"01",level:2},{value:"Scaling and Automation",id:"02",level:2},{value:"Integration and Audits",id:"03",level:2}];function u(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{GlossaryTerm:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GlossaryTerm",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"evaluation-design",children:"Evaluation Design"})}),"\n",(0,n.jsx)(t.p,{children:"Now that we've explored various evaluation techniques and methodologies, and also some concrete evaluations in different categories of capability, propensity and control. The next thing to understand is how to implement these effectively at scale. The objective of this section is to outline some best practices for building a robust evaluation infrastructure - from designing evaluation protocols and quality assurance processes, to scaling automation and integrating with the broader AI Safety ecosystem. We'll see how components like evaluation design, model-written evaluations, and meta-evaluation methods work together to make AIs safer."}),"\n",(0,n.jsx)(o.A,{title:"Evaluation design inspiration from cognitive science",collapsed:!0,children:(0,n.jsxs)(t.p,{children:["Some researchers have suggested taking more inspiration from the cognitive sciences for insights for improving AI evaluation methodology. Over decades, researchers in comparative psychology and psychometrics have developed sophisticated techniques for assessing intelligence and capabilities across different types of minds - from human infants to various animal species. These fields have extensive experience with crucial challenges that AI evaluation faces today, like establishing construct validity, controlling for confounding explanations, and measuring capabilities that can't be directly observed. However, this adaptation requires careful consideration of AI systems' unique characteristics. We can't simply transplant techniques designed for biological minds, but we can learn from their methodological rigor. For example, developmental psychology's systematic approaches to testing object permanence or theory of mind could inform how we design evaluations for similar capabilities in AI systems. Similarly, psychometrics' sophisticated frameworks for validating measurement constructs could help ensure our AI evaluations actually measure what we intend them to measure (",(0,n.jsx)(t.a,{href:"https://arxiv.org/abs/2407.09221",children:"Burden, 2024"}),")."]})}),"\n",(0,n.jsx)(t.h2,{id:"01",children:"Affordances"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Affordances are resources and opportunities we give the AI system."})," They include things like access to the internet, ability to run code, available context length, or specialized tools like calculators (",(0,n.jsx)(t.a,{href:"https://static1.squarespace.com/static/6593e7097565990e65c886fd/t/65a6f1389754fc06cb9a7a14/1705439547455/auditing_framework_web.pdf",children:"Sharkey et al., 2024"}),"). Just like how a calculator makes certain math problems trivial while others remain hard, different affordances can dramatically change what an AI system can accomplish during evaluation."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Different evaluation conditions modify the affordances available to the model during testing."})," This means that even when measuring the same property, we can increase or decrease the amount of affordance a system has, and this tells us different things about a model's capabilities:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Minimal affordance:"})," You can think of minimal affordance conditions as sort of the worst case for the model. We deliberately restrict the resources and opportunities available - like limiting context length, removing tool access, or restricting API calls. When evaluating coding ability, this might mean testing the model with no access to documentation or ability to run code. This helps establish a baseline of core capabilities independent of external tools."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Typical affordance:"})," Under typical affordance conditions, we aim to replicate the normal operating environment - providing standard tools and typical context. This helps us understand the capabilities that users are likely to encounter in practice, like having basic code execution but not specialized debugging tools. Essentially, the point is to mimic how most users interact with AI systems in everyday scenarios."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Maximal affordance:"})," Under maximal affordance conditions, we provide the model with all potentially relevant tools, context, and resources. For that same coding evaluation, we might provide access to documentation, debugging tools, and execution environments. This helps us understand the full extent of what the model can accomplish when given appropriate resources."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.A,{src:"./img/F26_Image_56.png",alt:"Enter image alt description",number:"54",label:"5.54",caption:"The relationship between an AI system's capabilities, propensities, affordances, and behaviors. ([Sharkey et al., 2024](https://static1.squarespace.com/static/6593e7097565990e65c886fd/t/65a6f1389754fc06cb9a7a14/1705439547455/auditing_framework_web.pdf))"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Understanding the relationship between affordances and capabilities helps us design more comprehensive evaluation protocols."})," For instance, when evaluating a model's coding capabilities, testing under minimal affordances might reveal concerning behaviors that are masked when the model has access to better tools. Maybe the model suggests unsafe coding practices when it can't verify its solutions through execution. Similarly, testing under maximal affordances might reveal emergent capabilities that aren't visible in more restricted environments - like how GPT-4's ability to play Minecraft only became apparent when given appropriate scaffolding and tools (",(0,n.jsx)(t.a,{href:"https://arxiv.org/abs/2305.16291",children:"Wang et al., 2023"}),")."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Quality assurance in evaluation design."})," Given how significantly affordances affect model behavior, we need systematic approaches to ensure our evaluations remain reliable and meaningful. This means carefully documenting what affordances were available during testing, verifying that affordance restrictions are properly enforced, and validating that our results are reproducible under similar conditions. For instance, when the U.S. and UK AI Safety Institutes evaluated Claude 3.5 Sonnet, they explicitly noted that their findings were preliminary due to testing under limited affordances and time constraints (",(0,n.jsx)(t.a,{href:"https://cdn.prod.website-files.com/663bd486c5e4c81588db7a1d/673b689ec926d8d32e889a8e_UK-US-Testing-Report-Nov-19.pdf",children:"US & UK AISI, 2024"}),")."]}),"\n",(0,n.jsx)(r.A,{src:"./img/nA1_Image_57.png",alt:"Enter image alt description",number:"55",label:"5.55",caption:"The relationship between absolute capabilities, affordances, contextual and reachable capabilities, and the level of auditing warranted. Absolute capabilities and available affordances are orthogonal. As either increase, the level of auditing required also increases ([Sharkey et al. 2024](https://static1.squarespace.com/static/6593e7097565990e65c886fd/t/65a6f1389754fc06cb9a7a14/1705439547455/auditing_framework_web.pdf))."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Moving beyond individual evaluations."})," While understanding affordances is crucial for designing individual evaluations, we also need to consider how different evaluation conditions work together as part of a larger system. A comprehensive evaluation protocol might start with minimal affordance testing to establish baseline capabilities, then progressively add affordances to understand how the model's behavior changes. This layered approach helps us build a more complete picture of model behavior while maintaining rigorous control over testing conditions."]}),"\n",(0,n.jsx)(t.h2,{id:"02",children:"Scaling and Automation"}),"\n",(0,n.jsx)(t.p,{children:"In previous sections, we explored various evaluation techniques and conditions, but implementing these systematically faces a major challenge: scale. When OpenAI or Anthropic release a new model, dozens of independent researchers and organizations need to verify its capabilities and safety properties. Doing this manually for every evaluation under different affordance conditions would be prohibitively expensive and time-consuming. We need systems that can automatically run comprehensive evaluation suites while maintaining the careful control over conditions we discussed earlier."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Automating evaluation through model written evaluations (MWEs)."})," As we scale up evaluations, we need to make strategic decisions about resource allocation. Do we run many quick evaluations under different conditions, or fewer evaluations with more thorough testing? One approach is using automated tools to do broad initial testing, then dedicating more resources to deep investigation of concerning behaviors. This tiered approach helps balance the need for comprehensive coverage with limited resources. One approach is using AI models themselves to help generate and run evaluations. Even current language models can write high-quality evaluation questions when properly prompted (",(0,n.jsx)(t.a,{href:"https://arxiv.org/abs/2212.09251",children:"Perez et al., 2022"}),"). This approach might help address the scaling challenge by reducing the human effort needed to create new evaluations."]}),"\n",(0,n.jsxs)(o.A,{title:"How do model-written evaluations work?",collapsed:!0,children:[(0,n.jsxs)(t.p,{children:['The basic approach involves having an AI model generate evaluation questions based on a specific behavior or capability we want to test. For example, to evaluate power-seeking tendencies, we might prompt the model with a description of power-seeking behavior and ask it to generate relevant multiple-choice questions. These generated questions are then filtered using a second model that acts as a judge, scoring them for quality and relevance. To maintain diversity, researchers use various prompting techniques like "variant prompts" that encourage different question formats and scenarios. For example, one variant might request questions about real-world scenarios, while another focuses on hypothetical ethical dilemmas. The final step involves human validation of a sample of questions to ensure quality (',(0,n.jsx)(t.a,{href:"https://www.alignmentforum.org/posts/yxdHp2cZeQbZGREEN/improving-model-written-evals-for-ai-safety-benchmarking",children:"Dev & Hobbhahn, 2024"}),")."]}),(0,n.jsxs)(t.p,{children:["When comparing MWEs to human written evaluations (HWEs), researchers found some differences. Models often respond very differently to these two types of questions even when they're supposed to test the same property. For instance, Claude 3 Haiku showed a 25% power-seeking inclination on human-written questions but 88% on model-written ones. The evaluations also formed distinct clusters in ",(0,n.jsx)(a,{term:"embedding",definition:'{"definition":"A dense vector representation of discrete objects (like words or tokens) in a continuous vector space that captures semantic relationships.","source":"","aliases":["Embedding","word embedding","embeddings","vector representation","vector embeddings"]}',children:(0,n.jsx)(a,{term:"embedding",definition:'{"definition":"A dense vector representation of discrete objects (like words or tokens) in a continuous vector space that captures semantic relationships.","source":"","aliases":["Embedding","word embedding","embeddings","vector representation","vector embeddings"]}',children:"embedding"})})," space, suggesting systematic differences in how questions were formulated. Interestingly though, when graded by an LLM judge for quality, MWEs actually scored higher (mean=8.1) than HWEs (mean=7.2). This suggests that while MWEs can be high quality, we need to be careful about potential biases and ensure they're truly testing the same properties as human-written evaluations (",(0,n.jsx)(t.a,{href:"https://www.alignmentforum.org/posts/yxdHp2cZeQbZGREEN/improving-model-written-evals-for-ai-safety-benchmarking",children:"Dev & Hobbhahn, 2024"}),"). ",(0,n.jsx)(t.strong,{children:"Building automated evaluation pipelines."}),' Let\'s look at how researchers actually implement model-written evaluations. In Apollo Research\'s recent work, they developed a systematic protocol: First, they have a large language model like Claude 3.5 generate batches of 40 questions per API call using few-shot examples and clear evaluation criteria. The model outputs these in structured JSON format to ensure consistency. They then use a separate "judge" model (usually from a different model family to avoid bias) to score each generated question on quality and relevance. Any questions scoring below a threshold are automatically discarded. To ensure coverage and diversity, they employ "variant prompts".This automated pipeline can generate hundreds of high-quality evaluation questions in hours rather than the weeks it might take human evaluators.']})]}),"\n",(0,n.jsx)(r.A,{src:"./img/cvW_Image_58.png",alt:"Enter image alt description",number:"56",label:"5.56",caption:"Examples of model written evaluation questions. A RLHF model replies to a political question and gives opposite answers to users who introduce themselves differently, in line with the users\u2019 views. Model-written biography text in italics ([Perez et al., 2022](https://arxiv.org/abs/2212.09251))."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"We still face significant challenges in automating evaluations."})," First, we need to maintain quality as we scale - automated systems must be able to reliably enforce affordance conditions and detect potential evaluation failures. Second, generated evaluations need to be validated to ensure they're actually testing what we intend. As Apollo Research found, model-written evaluations sometimes had systematic blindspots or biases that needed to be corrected through careful protocol design (",(0,n.jsx)(t.a,{href:"https://www.alignmentforum.org/posts/yxdHp2cZeQbZGREEN/improving-model-written-evals-for-ai-safety-benchmarking",children:"Dev & Hobbhahn, 2024"}),")."]}),"\n",(0,n.jsx)(t.h2,{id:"03",children:"Integration and Audits"}),"\n",(0,n.jsx)(r.A,{src:"./img/JPq_Image_59.png",alt:"Enter image alt description",number:"57",label:"5.57",caption:"The aim is to avoid extreme risks from a powerful misaligned model ([Shevlane et al. 2023](https://arxiv.org/abs/2305.15324))."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"How do evaluations fit into the broader safety ecosystem?"})," When we talk about evaluations being used in practice, we're really talking about two distinct but complementary processes. First, there are the specific evaluation techniques we've discussed in previous sections - the tools we use to measure particular capabilities, propensities, or safety properties. Second, there's the broader process of auditing that uses these evaluations alongside other analysis methods to make comprehensive safety assessments."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Why do we need multiple layers of evaluations?"}),' The UK AI Safety Institute\'s approach demonstrates why integration requires multiple complementary layers. Their evaluation framework incorporates regular security audits, ongoing monitoring systems, clear response protocols, and external oversight - creating what they call a "defense in depth" approach (',(0,n.jsx)(t.a,{href:"https://www.gov.uk/government/publications/ai-safety-institute-approach-to-evaluations/ai-safety-institute-approach-to-evaluations",children:"UK AISI, 2024"}),"). This layered strategy helps catch potential risks that might slip through any single evaluation method."]}),"\n",(0,n.jsx)(r.A,{src:"./img/Obz_Image_60.png",alt:"Enter image alt description",number:"58",label:"5.58",caption:"Defense in depth ([Hendrycks, 2024](https://www.aisafetybook.com/textbook/component-failure-accident-models))"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"What makes auditing different from evaluation?"})," While evaluations are specific measurement tools, auditing is a systematic process of safety verification. An audit might employ multiple evaluations, but also considers broader factors like organizational processes, documentation, and safety frameworks. For example, when auditing a model for deployment readiness, we don't just run capability evaluations - we also examine training procedures, security measures, and incident response plans (",(0,n.jsx)(t.a,{href:"https://static1.squarespace.com/static/6593e7097565990e65c886fd/t/65a6f1389754fc06cb9a7a14/1705439547455/auditing_framework_web.pdf",children:"Sharkey et al., 2024"}),")."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"What types of audits do we need?"})," Different aspects of AI development require different types of audits:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Training design audits:"})," These verify safety considerations throughout the development process. Before training begins, auditors examine factors like compute usage plans, ",(0,n.jsx)(a,{term:"training set",definition:'{"definition":"The portion of data used to train a machine learning model by adjusting its parameters.","source":"","aliases":["Training Set","training data"]}',children:(0,n.jsx)(a,{term:"training set",definition:'{"definition":"The portion of data used to train a machine learning model by adjusting its parameters.","source":"","aliases":["Training Set","training data"]}',children:"training data"})})," content, and experiment design decisions. During training, they monitor for concerning capabilities or behaviors. For instance, training audits might look for indicators that scaling up model size might lead to dangerous capabilities (",(0,n.jsx)(t.a,{href:"https://www.anthropic.com/news/anthropics-responsible-scaling-policy",children:"Anthropic, 2024"}),")."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Security audits:"})," These assess whether safety measures remain effective under adversarial conditions. This includes technical security (like model isolation and access controls) and organizational security (like insider threat prevention)."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Deployment audits:"})," These examine specific deployment scenarios. They consider questions like: Who will have access? What affordances will be available? What safeguards are needed? These audits help determine whether deployment plans adequately address potential risks. For example, deployment audits might assess both direct risks from model capabilities and potential emergent risks from real-world usage patterns of those capabilities (",(0,n.jsx)(t.a,{href:"https://www.apolloresearch.ai/blog/a-starter-guide-for-evals",children:"Apollo Research, 2024"}),")."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Governance audits:"})," These look at organizational safety infrastructure. They verify that companies have appropriate processes, documentation requirements, and response protocols. This includes reviewing incident response plans, oversight mechanisms, and transparency practices (",(0,n.jsx)(t.a,{href:"https://arxiv.org/abs/2305.15324",children:"Shevlane et al., 2023"}),")."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.A,{src:"./img/D52_Image_61.png",alt:"Enter image alt description",number:"59",label:"5.59",caption:"Determinants of AI system\u2019s effects on the world and the types of auditing that act on them. ([Sharkey et al., 2024](https://static1.squarespace.com/static/6593e7097565990e65c886fd/t/65a6f1389754fc06cb9a7a14/1705439547455/auditing_framework_web.pdf))"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Evaluations support the auditing process because each type of audit uses different combinations of evaluations to gather evidence."})," For example, a deployment audit might use capability evaluations to establish upper bounds on risky behaviors, propensity evaluations to understand default tendencies, and control evaluations to verify safety measures. The audit process then synthesizes these evaluation results with other evidence to make safety assessments."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Internal auditing is a great first step but we also need independent external audits."})," Third party audits provide additional assurance by bringing fresh perspectives and diminishing the probability for potential conflicts of interest. Organizations like METR and Apollo Research demonstrate how independent auditors can combine multiple evaluation techniques to provide comprehensive safety assessments. However, this ecosystem is still developing, and we need more capacity for independent evaluation of frontier AI systems (",(0,n.jsx)(t.a,{href:"https://arxiv.org/abs/2305.15324",children:"Shevlane et al., 2023"}),"). We talk more about bottlenecks to third party auditing in the limitations section."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"After deployment, we need ongoing monitoring and periodic re-auditing."})," We need this for several reasons - First, we need to catch unanticipated behaviors that emerge from real-world usage. Second, we need to evaluate any model updates or changes in deployment conditions. Third, we need to verify that safety measures remain effective. This creates a feedback loop where deployment observations inform future evaluation design and audit procedures (",(0,n.jsx)(t.a,{href:"https://arxiv.org/abs/2305.15324",children:"Shevlane et al., 2023"}),"; ",(0,n.jsx)(t.a,{href:"https://arxiv.org/abs/2403.13793",children:"Phuong et al., 2024"}),"; ",(0,n.jsx)(t.a,{href:"https://www.gov.uk/government/publications/ai-safety-institute-approach-to-evaluations/ai-safety-institute-approach-to-evaluations",children:"UK AISI, 2024"}),"; ",(0,n.jsx)(t.a,{href:"https://static1.squarespace.com/static/6593e7097565990e65c886fd/t/65a6f1389754fc06cb9a7a14/1705439547455/auditing_framework_web.pdf",children:"Sharkey et al., 2024"}),")."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"For evaluations and audits to have real impact, they must connect directly to decision-making processes."})," Both evaluations and audits need clear, predefined thresholds that trigger specific actions. For example, concerning results from capability evaluations during training might trigger automatic pauses in model scaling. Failed security audits should require immediate implementation of additional controls. Poor deployment audit results should modify or halt deployment plans (",(0,n.jsx)(t.a,{href:"https://static1.squarespace.com/static/6593e7097565990e65c886fd/t/65a6f1389754fc06cb9a7a14/1705439547455/auditing_framework_web.pdf",children:"Sharkey et al., 2024"}),")."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"These action triggers need to be integrated into broader governance frameworks."}),' As we discussed in the chapter on governance, many organizations are developing Responsible Scaling Policies (RSPs) that use evaluation results as "gates" for development decisions. However, without strong governance frameworks and enforcement mechanisms, there\'s a risk that evaluations and audits become mere checkbox exercises - what some researchers call "safety washing". We\'ll explore these limitations and potential failure modes in more detail in the next section.']})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);